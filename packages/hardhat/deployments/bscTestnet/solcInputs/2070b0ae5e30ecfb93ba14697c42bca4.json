{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol": {
      "content": "pragma solidity >=0.6.2;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n"
    },
    "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol": {
      "content": "pragma solidity >=0.6.2;\n\nimport './IUniswapV2Router01.sol';\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n"
    },
    "contracts/DcaExecutorV2.sol": {
      "content": "pragma solidity >=0.7.5;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {IUniswapV2Router02} from \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\";\n\ncontract DcaExecutorV2 {\n    struct DcaRequest {\n        address receiver;\n        IERC20 token1;\n        IERC20 token2;\n        uint256 token1InitialAmount;\n        uint256 token1CurrentAmount;\n        uint256 token2CurrentAmount;\n        IUniswapV2Router02 router;\n        uint256 swapExecutionPeriod;\n        uint256 startTimestamp;\n        uint256 numberOfSwapsToExecute;\n        uint256 numberOfSwapsExecuted;\n        uint256 lastExecutionTimestamp;\n    }\n\n    address[] public receivers;\n    mapping(address => uint256) public activeRequestsLength;\n    mapping(address => DcaRequest[]) public dcaRequests;\n    mapping(address => uint256) public completedRequestsLength;\n    mapping(address => DcaRequest[]) public dcaRequestsCompleted;\n\n    event Deposited(address indexed receiver, address token1Address, uint256 token1Amount, address token2Address, IUniswapV2Router02 router, uint256 swapExecutionPeriod, uint256 swapStartTime, uint256 numberOfSwaps);\n    event Swapped(address indexed receiver, address token1Address, uint256 token1Amount, address token2Address, uint256 token2Amount);\n    event Cancelled(address indexed receiver, uint256 index);\n    event Completed(address indexed receiver, uint256 index);\n\n    // approve the contract to spend the token\n    function submitDcaRequest(\n        IERC20 token1,\n        IERC20 token2,\n        uint256 token1Amount,\n        IUniswapV2Router02 router,\n        uint256 numberOfSwaps,\n        uint256 swapExecutionPeriod,\n        uint256 startTimestamp\n    ) external {\n        require(token1.transferFrom(msg.sender, address(this), token1Amount), \"funding transfer failed\");\n        receivers.push(msg.sender);\n        dcaRequests[msg.sender].push(\n            DcaRequest(\n                {\n                    receiver: msg.sender,\n                    token1: token1,\n                    token2: token2,\n                    token1InitialAmount: token1Amount,\n                    token1CurrentAmount: token1Amount,\n                    token2CurrentAmount: 0,\n                    router: router,\n                    swapExecutionPeriod: swapExecutionPeriod,\n                    startTimestamp: startTimestamp,\n                    numberOfSwapsToExecute: numberOfSwaps,\n                    numberOfSwapsExecuted: 0,\n                    lastExecutionTimestamp: 0\n                }\n            )\n        );\n        activeRequestsLength[msg.sender] = dcaRequests[msg.sender].length;\n        token1.approve(address(router), token1Amount);\n        emit Deposited(msg.sender, address(token1), token1Amount, address(token2), router, swapExecutionPeriod, startTimestamp, numberOfSwaps);\n    }\n\n    function executeSwap(address receiver, uint256 index) external {\n        address[] memory path;\n        DcaRequest memory request = dcaRequests[receiver][index];\n        require(block.timestamp >= request.startTimestamp, \"start date not reached\");\n        require(request.numberOfSwapsToExecute > 0, \"no more swaps\");\n        require(block.timestamp >= request.lastExecutionTimestamp + request.swapExecutionPeriod, \"swap execution period not reached\");\n\n        uint256 amountIn = request.token1CurrentAmount / request.numberOfSwapsToExecute;\n        path[0] = address(request.token1);\n        path[1] = address(request.token2);\n        uint256[] memory amounts = request.router.swapExactTokensForTokens({\n                amountIn: amountIn,\n                amountOutMin: 0,\n                path: path,\n                to: receiver,\n                deadline: block.number + 10\n            });\n        request.numberOfSwapsToExecute--;\n        request.numberOfSwapsExecuted++;\n        request.token1CurrentAmount -= amountIn;\n        request.token2CurrentAmount += amounts[1];\n        request.lastExecutionTimestamp = block.timestamp;\n        dcaRequests[receiver][index] = request;\n        emit Swapped(receiver, address(request.token1), amountIn, address(request.token2), amounts[0]);\n\n        if (request.numberOfSwapsToExecute == 0) {\n            _completeRequest(receiver, index);\n            emit Completed(receiver, dcaRequestsCompleted[receiver].length - 1);\n        }\n    }\n\n    function cancelDcaRequest(address receiver, uint256 index) external {\n        require(receiver == msg.sender, \"not authorized\");\n        _completeRequest(receiver, index);\n        emit Cancelled(receiver, dcaRequestsCompleted[receiver].length - 1);\n    }\n\n    function _completeRequest(address receiver, uint256 index) private {\n        DcaRequest memory request = dcaRequests[receiver][index];\n        require(request.token1.transfer(receiver, request.token1CurrentAmount), \"transfer failed\");\n        require(request.token2.transfer(receiver, request.token2CurrentAmount), \"transfer failed\");\n        dcaRequestsCompleted[receiver].push(request);\n        dcaRequests[receiver][index] = dcaRequests[receiver][dcaRequests[receiver].length - 1];\n        dcaRequests[receiver].pop();\n        activeRequestsLength[receiver] = dcaRequests[receiver].length;\n        completedRequestsLength[receiver] = dcaRequestsCompleted[receiver].length;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}